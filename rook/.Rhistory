CompleteData <- merge(usaDT,map_data, by.x="region", by.y = "region")
usa.abb <- aggregate(long,lat, group, as.numeric(CompleteData$Clinton))
CompleteData <- merge(usaDT,map_data, by.x="region", by.y = "region")
usa.abb <- aggregate(long,lat, group, as.numeric(CompleteData$Clinton))
print(usaDT)
usaDT <- map_data[1]
usaDT <- rbind(usaDT,alaska)
usaDT <- rbind(usaDT,hawaii)
print(usaDT)
CompleteData <- merge(usaDT,map_data, by.x="region", by.y = "region")
usa.abb <- aggregate(long,lat, group, as.numeric(CompleteData$Clinton))
usaDT <- map_data("state")
usaDT <- rbind(usaDT,alaska)
usaDT <- rbind(usaDT,hawaii)
print(usaDT)
usaDT <- map_data("state")
usaDT <- rbind(usaDT,alaska)
usaDT <- rbind(usaDT,hawaii)
print(usaDT)
CompleteData <- merge(usaDT,map_data, by.x="region", by.y = "region")
usa.abb <- aggregate(short,lat, group, as.numeric(CompleteData$Clinton))
help(region)
print(map_data)
print(usaDT)
usaDT <- map_data("region")
usaDT <- map_data("state")
print(usaDT)
CompleteData <- merge(usaDT,map_data, by.x="state", by.y = "state")
usa.abb <- aggregate(long ,lat, group, as.numeric(CompleteData$Clinton))
usa.abb <- aggregate(cbind(long,lat, group, as.numeric(CompleteData$Clinton)))
usa.abb <- aggregate(cbind(long,lat, group, as.numeric(CompleteData$Clinton))-Total$abb, data= Total, FUN=function(x)mean(range(x)))
library(plyr) # for merging datasets
library(scales) # to get nice looking legends
library(maps)
map_data <- read.csv("/Users/kripanshubhargava/Desktop/R project/us_election2016.csv",header = T,stringsAsFactors = FALSE)
names(map_data)[2] <- "Clinton"
names(map_data)[3] <- "Trump"
names(map_data)[4] <- "Others"
names(map_data)[1] <- "region"
map_data["abb"] <- NA
for( i in 1:nrow(map_data)){
print(map_data[i,"Clinton"] <- sub('%','',map_data[i,"Clinton"]))
}
for( i in 1:nrow(map_data)){
print(map_data[i,"Trump"] <- sub('%','',map_data[i,"Trump"]))
}
for( i in 1:nrow(map_data)){
print(map_data[i,"Others"] <- sub('%','',map_data[i,"Others"]))
}
for (i in 1:nrow(map_data)){
map_data[i,"abb"] <- state.abb[match(toupper(map_data[i, "region"]),toupper(state.name))]
print(map_data[i,"abb"])
}
worldDT <- map_data("world")
alaska<- subset(worldDT, subregion == 'Alaska')
alaska[6] <- "alaska"
names(alaska)[5] <- "subregion"
names(alaska)[6] <- "region"
hawaii<- subset(worldDT, subregion == 'Hawaii')
hawaii[6] <- "hawaii"
names(hawaii)[5] <- "subregion"
names(hawaii)[6] <- "region"
usaDT <- map_data("state")
usaDT <- rbind(usaDT,alaska)
usaDT <- rbind(usaDT,hawaii)
print(usaDT)
CompleteData <- merge(usaDT,map_data, by.x="region", by.y = "region")
source('~/.active-rstudio-document')
install.packages("ggmap")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
print(usaDT)
print(data)
data <- sub('%','',map_data)
print(data)
print(map_data)
data <- sub('%','',map_data)
print(data)
print(map_data)
worldDT <- map_data("world")
alaska<- subset(worldDT, subregion == 'Alaska')
alaska[6] <- "alaska"
names(alaska)[5] <- "subregion"
names(alaska)[6] <- "region"
hawaii<- subset(worldDT, subregion == 'Hawaii')
hawaii[6] <- "hawaii"
names(hawaii)[5] <- "subregion"
names(hawaii)[6] <- "region"
usaDT <- map_data("state")
usaDT <- rbind(usaDT,alaska)
usaDT <- rbind(usaDT,hawaii)
print(usaDT)
CompleteData <- merge(usaDT,map_data, by.x="region", by.y = "region")
usa.abb <- aggregate(cbind(long ,lat, group, as.numeric(CompleteData$Clinton)) ~ CompleteData$abb, data= CompleteData, FUN=function(x)mean(range(x)))
worldDT <- map_data("world")
alaska<- subset(worldDT, subregion == 'Alaska')
alaska[6] <- "alaska"
names(alaska)[5] <- "subregion"
names(alaska)[6] <- "region"
hawaii<- subset(worldDT, subregion == 'Hawaii')
hawaii[6] <- "hawaii"
names(hawaii)[5] <- "subregion"
names(hawaii)[6] <- "region"
usaDT <- map_data("state")
usaDT <- rbind(usaDT,alaska)
usaDT <- rbind(usaDT,hawaii)
print(usaDT)
CompleteData <- merge(usaDT,map_data, by.x="region", by.y = "region")
usa.abb <- aggregate(cbind(long ,lat, group, as.numeric(CompleteData$Clinton)) ~ CompleteData$abb, data= CompleteData, FUN=function(x)mean(range(x)))
(usa.abb)[1]<-"abb"
map_data["Trump"]<- NA
map_data["Trump"]=100- map_data["Clinton"]
data <- sub('%','',map_data)
names(map_data)[2] <- "Clinton"
names(map_data)[3] <- "Trump"
names(map_data)[4] <- "Others"
names(map_data)[1] <- "region"
map_data["Trump"]<- NA
map_data["Trump"]=100- map_data["Clinton"]
source('~/.active-rstudio-document')
print(usaDT)
print(usaDT)
for (i in 1:nrow(map_data)){
map_data[i,"abb"] <- state.abb[match(toupper(map_data[i, "region"]),toupper(state.name))]
print(map_data[i,"abb"])
}
worldDT <- map_data("usa")
alaska<- subset(worldDT, subregion == 'Alaska')
alaska[6] <- "alaska"
names(alaska)[5] <- "subregion"
names(alaska)[6] <- "region"
hawaii<- subset(worldDT, subregion == 'Hawaii')
hawaii[6] <- "hawaii"
names(hawaii)[5] <- "subregion"
names(hawaii)[6] <- "region"
usaDT <- map_data("state")
usaDT <- rbind(usaDT,alaska)
usaDT <- rbind(usaDT,hawaii)
print(usaDT)
CompleteData <- merge(usaDT,map_data, by.x="region", by.y = "region")
usa.abb <- aggregate(cbind(long ,lat, group, as.numeric(CompleteData$Clinton)) ~ CompleteData$abb, data= CompleteData, FUN=function(x)mean(range(x)))
worldDT <- map_data("world")
alaska<- subset(worldDT, subregion == 'Alaska')
alaska[6] <- "alaska"
names(alaska)[5] <- "subregion"
names(alaska)[6] <- "region"
hawaii<- subset(worldDT, subregion == 'Hawaii')
hawaii[6] <- "hawaii"
names(hawaii)[5] <- "subregion"
names(hawaii)[6] <- "region"
usaDT <- map_data("state")
usaDT <- rbind(usaDT,alaska)
usaDT <- rbind(usaDT,hawaii)
print(usaDT)
CompleteData <- merge(usaDT,map_data, by.x="region", by.y = "region")
usa.abb <- aggregate(cbind(long ,lat, group, as.numeric(CompleteData$Clinton)) ~ CompleteData$abb, data= CompleteData, FUN=function(x)mean(range(x)))
usa.abb <- aggregate(cbind(long ,lat, as.numeric(CompleteData$Clinton)) ~ CompleteData$abb, data= CompleteData, FUN=function(x)mean(range(x)))
usa.abb <- aggregate(cbind(long ,lat, group, as.numeric(CompleteData$Clinton)) ~ CompleteData$abb, data= CompleteData, FUN=function(x)mean(range(x)))
(map_data)
usa.abb <- aggregate(cbind(long ,lat, group, as.numeric(CompleteData$Clinton)) ~ CompleteData$abb, data= CompleteData, FUN=sum()))
usa.abb <- aggregate(cbind(long ,lat, group, as.numeric(CompleteData$Clinton)) ~ CompleteData$abb, data= CompleteData, FUN=sum())
(usa.abb)[1]<-"abb"
usa.abb <- aggregate(cbind(long ,lat, group, as.numeric(CompleteData$Clinton)) ~ CompleteData$abb, data= CompleteData, FUN=function(x)mean(range(x)))
election_map
election_map= ggplot() + geom_polygon(data= CompleteData, aes(x=long, y=lat, group= group,fill=CompleteData$Clinton)), Color= "white") +
geom_text(data=usa.abb, aes(x= long, y=lat, lable= abb), color="black",size="3") + scale_fill_gradientn(colours = c("#F08080", "white", "#5DADE2"),na.value = "transparent",
breaks=c(0,50,100), labels=c("Trump","Equal","Clinton"), limits=c(0,100),
name= "Election Prediction"  )
names(usa.abb)[1]<-"abb"
election_map= ggplot() + geom_polygon(data= CompleteData, aes(x=long, y=lat, group= group,fill=CompleteData$Clinton)), Color= "white") +
geom_text(data=CompleteData, aes(x= long, y=lat, lable= abb), color="black",size="3") + scale_fill_gradientn(colours = c("#F08080", "white", "#5DADE2"),na.value = "transparent",
breaks=c(0,50,100), labels=c("Trump","Equal","Clinton"), limits=c(0,100),
name= "Election Prediction"  )
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library(raster) # to get map shape file
source('~/Downloads/Mini Project 2.R')
install.packages("raster")
source('~/Downloads/Mini Project 2.R')
source('~/Downloads/Mini Project 2.R')
tableData <- read.table("/Users/kripanshubhargava/Desktop/R project/us_election2016.csv", header = T, sep = ",",stringsAsFactors = FALSE)
names(tableData)[2] <- "Clinton"
names(tableData)[3] <- "Trump"
names(tableData)[4] <- "Others"
names(tableData)[1] <- "State"
for( i in 1:nrow(tableData)){
print(tableData[i,"Clinton"] <- sub('%','',tableData[i,"Clinton"]))
}
for( i in 1:nrow(tableData)){
print(tableData[i,"Trump"] <- sub('%','',tableData[i,"Trump"]))
}
for( i in 1:nrow(usa.dat)){
print(tableData[i,"Others"] <- sub('%','',tableData[i,"Others"]))
}
tableData$State <- tolower(tableData$State)
for( i in 1:nrow(tableData)){
print(tableData[i,"Others"] <- sub('%','',tableData[i,"Others"]))
}
tableData$State <- tolower(tableData$State)
map.usa <- join(map.usa, tableData, by = "State", type = "inner")       #Inner join of table data and map data
finalData <- transform(map.usa, Clinton = as.numeric(Clinton),          #Changing datatype from Character to numeric
Trump = as.numeric(Trump), Others = as.numeric(Others))
finalData$delta <- finalData$Trump - finalData$Clinton                  #Adding a new column that stores the difference in percentage
states <- data.frame(state.center, state.abb) # centers of states and abbreviations
subset <- tolower(state.name) %in% finalData$State
states <- states[subset, ]
plot_data <- function(data, brks, title) {                              #Function for plotting
g.plot <- ggplot() +
#		Draw borders of states
geom_polygon(data = data, aes(x = long, y = lat, group = group,
fill = delta, color = mpg), color = "black", size = 0.35) +
# For filling colours
scale_fill_gradientn(colours=c("#0099ff", "#4db8ff", "#b3e0ff", "#ffffff", "#ff9999", "#ff3333", "#b30000"),
breaks=brks, labels=c("","CLINTON"," "," "," "," ","TRUMP",""), limits=c(-70,70))+
#		Adding and formatting legend
theme(legend.text = element_text(colour="#0000b3", size = 8, face = "bold")) + labs(title = title, fill = "",margin = margin(10,500,10,10)) +
#		Adding state abbreviations
geom_text(data = states, aes(x = x, y = y, label = state.abb), size = 3)
return(g.plot)
}
breakpoints <- seq(-70, 70, by = 20)                                    #Setting break points
map.title <- "Election Results 2016"                                    #Setting Title
ggsave(plot_data(finalData, breakpoints, map.title),height = 4,width = 4*1.9,file = "usa_election2016.jpg")
source('~/Downloads/Mini Project 2.R')
sub('%','',tableData)
print(tableData[i,"Others"] <- sub('%','',tableData[i,"Others"]))
tableData$State <- tolower(tableData$State)
tableData<-sub('%','',tableData1)
tableData1 <- read.table("/Users/kripanshubhargava/Desktop/R project/us_election2016.csv", header = T, sep = ",",stringsAsFactors = FALSE)
names(tableData1)[2] <- "Clinton"
names(tableData1)[3] <- "Trump"
names(tableData1)[4] <- "Others"
names(tableData1)[1] <- "State"
tableData<-sub('%','',tableData1)
print(tableData[i,"Others"] <- sub('%','',tableData[i,"Others"]))
print(tableData)
tableData<-sub('%',' ',tableData1)
print(tableData)
map_data <- read.csv("/Users/kripanshubhargava/Desktop/R project/us_election2016.csv",header = T)
data <- sub('%','',map_data)
print(data)
print(map_data)
print(tableData)
names(tableData)[1] <- "State"
for( i in 1:nrow(tableData)){
}
for( i in 1:nrow(tableData)){
print(tableData[i,"Trump"] <- sub('%','',tableData[i,"Trump"]))
}
for( i in 1:nrow(tableData)){
print(tableData[i,"Others"] <- sub('%','',tableData[i,"Others"]))
}
print(tableData)
tableData$State <- tolower(tableData$State)
map.usa <- join(map.usa, tableData, by = "State", type = "inner")       #Inner join of table data and map data
finalData <- transform(map.usa, Clinton = as.numeric(Clinton),          #Changing datatype from Character to numeric
Trump = as.numeric(Trump), Others = as.numeric(Others))
finalData$delta <- finalData$Trump - finalData$Clinton                  #Adding a new column that stores the difference in percentage
help(rnorm)
help(binom)
source('~/.active-rstudio-document')
rbinom(n=5,p=0.05,1)
rbinom(n=5,p=5,1)
plot(x)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
exists("before")
before <- c(56,47,49,37,38,60,50,43,43,50,56,54,58)
print(brfore)
after <- c(53,21,32,49,45,38,44,33,32,43,53,46,36,48,39,35,37,36,39,45)
print(after)
exists("before")
before <- c(56,47,49,37,38,60,50,43,43,50,56,54,58)
print(brfore)
after <- c(53,21,32,49,45,38,44,33,32,43,53,46,36,48,39,35,37,36,39,45)
print(after)
exists("before")
stem(before)
stem(after)
sort(before)
sort(after)
median(before)
median(after)
summary(before)
summary(after)
boxplot(before,after)
IQR(before)
IQR(after)
before <- c(56,47,49,37,38,60,50,43,43,50,56,54,58)
Q1(Before)
data1<- 43-1.5*IQR(before)
data2<- 56+1.5*IQR(before)
data1
data2
data3
data3<-35.75 - 1.5*IQR(after)
data4<- 45.25 +1.5*IQR(after)
data3
data4
phat<-mean(X);
source('~/.active-rstudio-document')
Accuracy_Ci<-function(nsim=1000,size, p){
U <- runif(size) #rbinom
X <- 1*(U<=p);
phat<-mean(X);
est.std.err <- sqrt(phat*(1-phat)/size);
ci <-phat + c(-1, 1) * qnorm(1 - (alpha/2)) * est.std.err;
acc <- 0.0
for(i in 1:length(size)){
cimat<-replicate(nsim,conf.int(size[i],p))
acc<-mean((p>=cimat[1,])*(p<=cimat[2,]))*100
}
Accuracy_Ci<-function(nsim=1000,size, p){
U <- runif(size) #rbinom
X <- 1*(U<=p);
phat<-mean(X);
est.std.err <- sqrt(phat*(1-phat)/size);
ci <-phat + c(-1, 1) * qnorm(1 - (alpha/2)) * est.std.err;
acc <- 0.0
for(i in 1:length(size)){
cimat<-replicate(nsim,conf.int(size[i],p))
acc<-mean((p>=cimat[1,])*(p<=cimat[2,]))*100
}
print(Accuracy_Ci)
print(Accuracy_Ci)
Accuracy_Ci<-function(nsim=1000,size, p){
U <- runif(size) #rbinom
X <- 1*(U<=p);
phat<-mean(X);
est.std.err <- sqrt(phat*(1-phat)/size);
ci <-phat + c(-1, 1) * qnorm(1 - (alpha/2)) * est.std.err;
acc <- 0.0
for(i in 1:length(size)){
cimat<-replicate(nsim,conf.int(size[i],p))
acc<-mean((p>=cimat[1,])*(p<=cimat[2,]))*100
}
}
Accuracy_Ci<-function(nsim=1000,size, p){
U <- runif(size) #rbinom
X <- 1*(U<=p);
phat<-mean(X);
est.std.err <- sqrt(phat*(1-phat)/size);
ci <-phat + c(-1, 1) * qnorm(1 - (alpha/2)) * est.std.err;
acc <- 0.0
for(i in 1:length(size)){
cimat<-replicate(nsim,conf.int(size[i],p))
acc<-mean((p>=cimat[1,])*(p<=cimat[2,]))*100
}
}
print(Accuracy_Ci)
source('~/.active-rstudio-document')
source('~/yo.R')
source('~/yo.R')
source('~/yo.R')
source('~/yo.R')
source('~/yo.R')
source('~/yo.R')
debugSource('~/yo.R')
source('~/yo.R')
source('~/yo.R')
source('~/yo.R')
source('~/yo.R')
source('~/yo.R')
source('~/yo.R')
source('~/yo.R')
source('~/yo.R')
Accuracy_Ci<-function(nsim=1000,size, p,alpha=0.05)
{
U <- runif(size) #rbinom
X <- 1*(U<=p);
phat<-mean(X);
est.std.err <- sqrt(phat*(1-phat)/size);
ci <-phat + c(-1, 1) * qnorm(1 - (alpha/2)) * est.std.err;
acc <- 0.0
for(i in 1:length(size))
{
cimat<-replicate(nsim,ci(size[i],p))
acc<-mean((p>=cimat[1,])*(p<=cimat[2,]))*100
}
return(acc);
}
source('~/asd.R')
source('~/new.R')
source('~/new.R')
source('~/new.R')
source('~/new.R')
source('~/new.R')
source('~/new.R')
Accuracy_Ci<-function(nsim=1000,size, p,alpha=0.05)
{
U <- runif(size) #rbinom
X <- 1*(U<=p);
phat<-mean(X);
est.std.err <- sqrt(phat*(1-phat)/size);
ci <-phat + c(-1, 1) * qnorm(1 - (alpha/2)) * est.std.err;
acc <- 0.0
for(i in 1:length(size))
{
cimat<-replicate(nsim,ci(size[i],p))
acc<-mean((p>=cimat[1,])*(p<=cimat[2,]))*100
}
return(acc);
}
source('~/yo.R')
source('~/Downloads/01_basic_statistics.R')
source('~/Downloads/02_graphical_statistics.R')
source('~/Downloads/02_graphical_statistics.R')
source('~/Downloads/02_graphical_statistics.R')
source('~/Downloads/02_graphical_statistics.R')
source('~/Downloads/02_graphical_statistics.R')
source('~/Downloads/02_graphical_statistics.R')
U<- runif(20)
print(U)
P<- qunif(0.6)
print(P)
P<- qunif(U)
print(P)
year <- seq(from=1790, to=2010, by=10)
uspop <- c(3.9, 5.3, 7.2, 9.6, 12.9, 17.1, 23.2, 31.4, 38.6, 50.2, 63.0, 76.2,
92.2, 106.0, 123.2, 132.2, 151.3, 179.3, 203.3, 226.5, 248.7,
281.4, 308.7)
plot(year, uspop, ylab="Population (in millions)", main="US population since 1790")
source('~/Downloads/HW1_R_code.R')
pbinom(q = 10 - 1, size = 20, prob = 0.4, lower.tail = FALSE)
pbinom(q = 10 - 1, size = 20, prob = 0.4, lower.tail = TRUE)
dbinom(q = 10 - 1, size = 20, prob = 0.4, lower.tail = TRUE)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
singer = read.table("/Users/kripanshubhargava/Downloads/singer.txt",sep = ",", header = TRUE)
boxplot(singer$height~singer$voice.part)
singer = read.table("/Users/kripanshubhargava/Downloads/singer.txt",sep = ",", header = TRUE)
singer
boxplot(singer$X.height.~singer$X.voice.part)
boxplot(singer$X.height.~singer$X.voice.part)
singer <- split(singer, singer$X.voice.part)
singer = read.table("/Users/kripanshubhargava/Downloads/singer.txt",sep = ",", header = TRUE)
singer
boxplot(singer$X.height.~singer$X.voice.part)
singer <- split(singer, singer$X.voice.part)
mean_alto_height = mean(singer$Alto$X.height.)
mean_bass_height = mean(singer$Bass$X.height)
mean_soprano_height = mean(singer$Soprano$X.height)
mean_tenor_height = mean(singer$Tenor$X.height)
sd_alto_height = sd(singer$Alto$X.height)
sd_bass_height = sd(singer$Bass$X.height)
sd_soprano_height = sd(singer$Soprano$X.height)
sd_tenor_height = sd(singer$Tenor$X.height)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/Downloads/BassTenor.R')
source('~/Ex3proj5.R')
source('~/Downloads/BassTenor.R')
source('~/Downloads/BassTenor.R')
source('~/Downloads/BassTenor.R')
source('~/Downloads/BassTenor.R')
source('~/Downloads/Untitled.R')
